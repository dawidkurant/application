// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Papu.Entities;

#nullable disable

namespace Papu.Migrations
{
    [DbContext(typeof(PapuDbContext))]
    partial class PapuDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Papu.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Papu.Entities.DayMenu", b =>
                {
                    b.Property<int>("DayMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DayMenuId"), 1L, 1);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.HasKey("DayMenuId");

                    b.HasIndex("CreatedById");

                    b.ToTable("DaysMenu");
                });

            modelBuilder.Entity("Papu.Entities.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishId"), 1L, 1);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("DishDescription")
                        .IsRequired()
                        .HasMaxLength(1300)
                        .HasColumnType("nvarchar(1300)");

                    b.Property<string>("DishImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MethodOfPeparation")
                        .IsRequired()
                        .HasMaxLength(1300)
                        .HasColumnType("nvarchar(1300)");

                    b.Property<int>("Portions")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("PreparationTime")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.HasKey("DishId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("Papu.Entities.DishKindOf", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("KindOfId")
                        .HasColumnType("int");

                    b.HasKey("DishId", "KindOfId");

                    b.HasIndex("KindOfId");

                    b.ToTable("DishKindsOf");
                });

            modelBuilder.Entity("Papu.Entities.DishMeal", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.HasKey("DishId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("DishMeals");
                });

            modelBuilder.Entity("Papu.Entities.DishType", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("DishId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("DishTypes");
                });

            modelBuilder.Entity("Papu.Entities.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Papu.Entities.KindOf", b =>
                {
                    b.Property<int>("KindOfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KindOfId"), 1L, 1);

                    b.Property<string>("KindOfName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KindOfId");

                    b.ToTable("KindsOf");
                });

            modelBuilder.Entity("Papu.Entities.Meal", b =>
                {
                    b.Property<int>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MealId"), 1L, 1);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("DayMenuId")
                        .HasColumnType("int");

                    b.Property<int>("MealType")
                        .HasColumnType("int");

                    b.HasKey("MealId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DayMenuId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Papu.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<decimal>("AssimilableCarbohydrates")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("Calcium")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("CarbohydrateReplacement")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(7,2)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<decimal>("Fat")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("Fiber")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("Folate")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("Iron")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("Magnesium")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("ProductImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Protein")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(7,2)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("VitaminB12")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("VitaminD")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("Weight")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(7,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Papu.Entities.ProductDish", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("DishProducts");
                });

            modelBuilder.Entity("Papu.Entities.ProductGroup", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("Papu.Entities.ProductMeal", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("ProductMeals");
                });

            modelBuilder.Entity("Papu.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Papu.Entities.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Papu.Entities.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"), 1L, 1);

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Papu.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Papu.Entities.DayMenu", b =>
                {
                    b.HasOne("Papu.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Papu.Entities.Dish", b =>
                {
                    b.HasOne("Papu.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Papu.Entities.DishKindOf", b =>
                {
                    b.HasOne("Papu.Entities.Dish", "Dish")
                        .WithMany("DishKindsOf")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Papu.Entities.KindOf", "KindOf")
                        .WithMany("DishKindsOf")
                        .HasForeignKey("KindOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("KindOf");
                });

            modelBuilder.Entity("Papu.Entities.DishMeal", b =>
                {
                    b.HasOne("Papu.Entities.Dish", "Dish")
                        .WithMany("DishMeals")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Papu.Entities.Meal", "Meal")
                        .WithMany("DishMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Papu.Entities.DishType", b =>
                {
                    b.HasOne("Papu.Entities.Dish", "Dish")
                        .WithMany("DishTypes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Papu.Entities.Type", "Type")
                        .WithMany("DishTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Papu.Entities.Meal", b =>
                {
                    b.HasOne("Papu.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Papu.Entities.DayMenu", "DayMenu")
                        .WithMany("Meals")
                        .HasForeignKey("DayMenuId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("DayMenu");
                });

            modelBuilder.Entity("Papu.Entities.Product", b =>
                {
                    b.HasOne("Papu.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Papu.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Papu.Entities.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Papu.Entities.ProductDish", b =>
                {
                    b.HasOne("Papu.Entities.Dish", "Dish")
                        .WithMany("DishProducts")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Papu.Entities.Product", "Product")
                        .WithMany("DishProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Papu.Entities.ProductGroup", b =>
                {
                    b.HasOne("Papu.Entities.Group", "Group")
                        .WithMany("ProductGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Papu.Entities.Product", "Product")
                        .WithMany("ProductGroups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Papu.Entities.ProductMeal", b =>
                {
                    b.HasOne("Papu.Entities.Meal", "Meal")
                        .WithMany("ProductMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Papu.Entities.Product", "Product")
                        .WithMany("ProductMeals")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Papu.Entities.User", b =>
                {
                    b.HasOne("Papu.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Papu.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Papu.Entities.DayMenu", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Papu.Entities.Dish", b =>
                {
                    b.Navigation("DishKindsOf");

                    b.Navigation("DishMeals");

                    b.Navigation("DishProducts");

                    b.Navigation("DishTypes");
                });

            modelBuilder.Entity("Papu.Entities.Group", b =>
                {
                    b.Navigation("ProductGroups");
                });

            modelBuilder.Entity("Papu.Entities.KindOf", b =>
                {
                    b.Navigation("DishKindsOf");
                });

            modelBuilder.Entity("Papu.Entities.Meal", b =>
                {
                    b.Navigation("DishMeals");

                    b.Navigation("ProductMeals");
                });

            modelBuilder.Entity("Papu.Entities.Product", b =>
                {
                    b.Navigation("DishProducts");

                    b.Navigation("ProductGroups");

                    b.Navigation("ProductMeals");
                });

            modelBuilder.Entity("Papu.Entities.Type", b =>
                {
                    b.Navigation("DishTypes");
                });

            modelBuilder.Entity("Papu.Entities.Unit", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
